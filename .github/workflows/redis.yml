name: Redis runner example
on: push

jobs:
  # Label of the runner job
  runner-job:
    # You must use a Linux environment when using service containers or container jobs
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
      - name: checkout ${{ github.ref }}
      # Downloads a copy of the code in your repository before running CI tests
        uses: actions/checkout@v3
      
      - name: create fake requirements
        run: |
          echo "" > pip_dev_package_list.txt
          ls -al
        
      - name: Set up Python ${{ matrix.python-version }} branch ${{ github.ref }} os ${{ runner.os }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: pip_dev_package_list.txt

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install redis-cli
        run: |
          sudo apt-get install redis-tools

      - name: Test connection to Redis
        # Runs a script that creates a Redis client, populates
        # the client with data, and retrieves data
        run: |
          export PING_OUT=`redis-cli -n 0 -h ${REDIS_HOST} -p ${REDIS_PORT} PING`
          if [ "${PING_OUT}" == "PONG" ]; then echo "redis connection succeeded"; else echo "cli return: ${PING_OUT}"; exit 1; fi
          redis-cli -n 0 SADD PY_V ${{ matrix.python-version }}
          sleep 10
          redis-cli -n 0 SMEMBERS PY_V 
          export PY_V_COUNT=`redis-cli -n 0 SCARD PY_V`
          if [ "${PY_V_COUNT}" -eq 1 ]; then echo "one user of redis"; else echo "${PY_V_COUNT} users of redis"; exit 2; fi


        # Environment variables
        env:
          # The hostname used to communicate with the Redis service container
          REDIS_HOST: localhost
          # The default Redis port
          REDIS_PORT: 6379

      - name: Test env
        run: echo ${PING_OUT} ${REDIS_HOST} ${REDIS_PORT}

      - name: fix pip cache issue by creating dir
        run: |
          mkdir -p -- "$(pip cache dir)"
          echo "$(pip cache dir)"
